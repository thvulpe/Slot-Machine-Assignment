# 🎰 Programming Assignment - Slot Machine Simulator

## 🧾 Overview

This project simulates a **slot machine game** using matrix operations and evaluates results across various tasks. It includes pattern recognition, scoring, optimization, and pathfinding using BFS. The solution is **modular**, **efficient**, and tailored to meet academic requirements.

---

## 🧩 Tasks Breakdown

### 🔄 TASK 1 – Column Rotation (Reel Simulation)

🔧 Implemented a function to perform **circular rotation** on a column of the matrix.

- 📌 Repeats rotation a given number of times.
- ♻️ Preserves wrap-around behavior for seamless transitions.

---

### 🏆 TASK 2 – Detecting Winning Combinations

🔍 Created dedicated functions to detect:

- ➡️ Horizontal wins  
- ⬇️ Vertical wins  
- 🔀 Diagonal wins  
- ❌ “X”-shaped wins  

🎯 Centralized scoring function aggregates the above.

🎁 **Bonuses:**

- 🧮 Checked distinct symbols via a frequency vector.
- 🚫 Prevented duplicate counting when patterns overlapped.

---

### ➕ TASK 3 – Total Score Calculation

🧠 Used logic from Tasks 1 and 2 to:

- 🔄 Apply a sequence of operations.
- 💰 Evaluate matrix state after each.
- ➗ Compute and return the total score.

---

### 🎨 TASK 4 – Optimal Symbol Placement

🧪 Brute-forced symbol replacement for each matrix cell:

- 🔁 Tried all valid symbols in each position.
- 📈 Calculated new score after each trial.
- 🥇 Tracked the **best score achieved**.

---

### 🧠 TASK 5 – Smart Double Rotation Strategy

🔢 For every **pair of columns**:

- 🔃 Tried all rotation combinations.
- 🗂️ Reset columns between iterations.
- 🧮 Identified the combination producing the **highest score**.

---

### 🧭 TASK 6 – Minimum Cost Path (Lee's Algorithm)

🚶 Used a BFS-based method to find the **lowest-cost path**:

- 🧱 Maintained a cost matrix for each cell.
- 🔁 Revisited a cell **only** if a better path was found.
- 📦 Used:
  - A queue (`coada`) for BFS traversal.
  - Direction vectors for navigating (↔️ ↑ ↓).
- 🧠 Dynamically reallocated memory for large queues.

---

## ⚙️ Tech Stack

- 🧑‍💻 Language: C (C99)
- 🧱 Data Structures: Matrices, Queues, Vectors
- 📐 Algorithms: Brute-force, Combinatorics, Lee’s (BFS with weights)
- 🧼 Style: Modular, clean, and maintainable code

---

## 🚀 Compile & Run

```bash
./make
In order to run:
./tema1
